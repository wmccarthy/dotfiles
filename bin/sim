#!/usr/bin/env python

import argparse
import json
import os
import subprocess
import sys
import time

# Constants
APP_ID = "com.lyft.ios.enterprise.debug"
IOS_VERSION = "10.0"
DEVICE_NAME = "iPhone 7"
SIM_PATH_FMT = "%s/Applications/Simulator.app/Contents/MacOS/Simulator"

# Shorcuts
DEVICE_SHORTCUTS = {
    "4s": "iPhone 4s",
    "5": "iPhone 5s",
    "5s": "iPhone 5s",
    "6": "iPhone 6",
    "6+": "iPhone 6 Plus",
    "6s": "iPhone 6s",
    "6s+": "iPhone 6s Plus",
    "7": "iPhone 7",
    "7+": "iPhone 7 Plus",
}

# Calculated paths
XCODE_PATH = subprocess.check_output(['xcode-select', '-p']).strip()
SIMULATOR_PATH = SIM_PATH_FMT % XCODE_PATH


def get_device_id(ios_version, device_name):
    """
    Gets Simulator Device UUID from the list of available simulators
    """
    simulators = subprocess.check_output(["xcrun", "simctl", "list", "--json"])
    simctl_json = json.loads(simulators)
    version = "iOS %s" % ios_version
    devices = simctl_json["devices"][version]
    for device in devices:
        if device["name"].lower() == device_name.lower():
            return device["udid"]

    return None


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--appid')
    parser.add_argument('-d', '--device')
    parser.add_argument('-f', '--front', action='store_true')
    parser.add_argument('-v', '--ios')
    args = parser.parse_args()

    # Launch simulator
    device = DEVICE_SHORTCUTS.get(args.device, args.device)
    version = args.ios or IOS_VERSION
    device_id = get_device_id(version, device)
    if not device_id:
        print("No device matching %s %s" % (device, version))
        sys.exit(1)

    launch_arguments = [
        SIMULATOR_PATH,
        '-CurrentDeviceUDID', device_id,
    ]

    if args.front:
        launch_arguments.extend(['-StayInFront', 'YES'])

    os.spawnv(os.P_NOWAIT, SIMULATOR_PATH, launch_arguments)

    # Open App after 1s (the simulator needs some time to launch)
    time.sleep(1)

    app_id = args.appid or APP_ID
    subprocess.check_output(['xcrun', 'simctl', 'launch', device_id, app_id])


if __name__ == "__main__":
    main()
