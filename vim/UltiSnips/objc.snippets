priority -50

global !p
from snippet_helpers import *
endglobal

snippet log "NSLog"
NSLog(@"$1"${1/[^%]*(%)?.*/(?1:, :\);)/}$2${1/[^%]*(%)?.*/(?1:\);)/}
endsnippet

snippet lazy "Lazy load ObjC property"
- (${1:type} *)${2:name}
{
	if (!_$2) {
		_$2 = [$1 $0];
	}

	return _$2;
}
endsnippet

snippet init "ObjC init"
- (id)init
{
	self = [super init];
	if (!self) {
		return nil;
	}

	$0

	return self;
}
endsnippet

snippet singleton "GCD singleton"
+ (instancetype)shared${1:Something}
{
	static id shared = nil;
	static dispatch_once_t onceToken;
	dispatch_once(&onceToken, ^{
		shared = [[self alloc] init];
	});

	return shared;
}

$0
endsnippet

snippet welf "WeakSelf dance"
__weak typeof(self) weakSelf = self;
$0
endsnippet

snippet welfblock "WeakSelf dance with block"
__weak typeof(self) weakSelf = self;
dispatch_${1:async}(${2:dispatch_get_global_queue}(${3:DISPATCH_QUEUE_PRIORITY_DEFAULT}, 0), ^{
	${4:__strong typeof(weakSelf) strongSelf = weakSelf;}
	[strongSelf $5];
});

$0
endsnippet

snippet describe "specta describe block"
describe(@"$1", ^{
	$0
});
endsnippet

snippet it "specta it block"
it(@"$1", ^{
	$0
});
endsnippet

snippet exe "specta expect equal"
expect($1).to.equal($2);$0
endsnippet

snippet beforeAll "specta before all"
beforeAll(^{
	$0
});
endsnippet

snippet beforeEach "specta before each"
beforeEach(^{
	$0
});
endsnippet

snippet prag "pragma mark"
#pragma mark - $0
endsnippet

# vim:ft=snippets:
